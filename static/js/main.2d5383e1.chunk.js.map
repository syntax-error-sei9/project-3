{"version":3,"sources":["Store/reducer.js","components/main/CityCard.jsx","components/main/Main.jsx","components/nav/WhereToGo.jsx","components/nav/Nav.jsx","components/main/CountryCard.jsx","components/intrestDetails/intrestDetails.jsx","components/interests/Interests.jsx","components/cities/Cities.jsx","components/cities/AlsoVisitedCities.jsx","components/cities/ThingsToDo.jsx","components/main/CityDetails.jsx","components/sidebar/Sidebar.jsx","components/cities/CitiesInCountry.jsx","App.js","serviceWorker.js","index.js"],"names":["inialState","cities","topCities","intrests","countries","allCities","CountryCities","rootReducer","state","action","type","value","CityCard","Card","style","width","Img","variant","src","this","props","imgURL","height","Body","Title","name","React","Component","MainSection","img","cityId","countryId","snippet","cityObj","citiesTop","axios","get","apiHttps","then","res","data","results","map","city","images","sizes","original","id","country_id","push","setTopCities","Carousel","index","Item","to","url","Caption","connect","dispatch","arrTopCities","WhereToGo","search","onSubmit","event","preventDefault","console","log","handleInputChange","e","target","setState","copyState","response","citiesNames","c","setCities","arrSearch","filter","toLowerCase","includes","className","InputGroup","Prepend","Text","FormControl","placeholder","onChange","autoFocus","Button","Nave","Navbar","collapseOnSelect","expand","bg","Brand","Toggle","aria-controls","Collapse","Nav","CountryCard","Axios","coutryid","image","countriesObj","countriesArr","country","setCountries","Fragment","display","flexDirection","flexGrow","flexWrap","justifyContent","class","alt","key","intrestDetails","intrestName","match","params","intCities","snipet","element","medium","withRouter","Interests","Container","Row","interests","intrest","colors","color","Math","floor","random","length","Col","xs","md","text","textAlign","textDecoration","intrestId","Header","Cities","setAllCities","arrAllCities","AlsoVisitedCities","alsoVisited","alsoVisitedCopy","catch","err","alert","ThingsToDo","cityRestrunts","cityRestruntsCopy","rest","CityDetails","cityCopy","cityData","arrCity","Jumbotron","fluid","SideBar","firstTen","slice","intrestDesc","description","setIntrest","CitiesInCountry","setCountryCities","App","path","render","exact","Main","Sidebar","Boolean","window","location","hostname","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","app","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gNAAMA,EAAY,CACdC,OAAQ,GACRC,UAAW,GACXC,SAAU,GACVC,UAAW,GACXC,UAAU,GACVC,cAAe,IAuCJC,EArCK,WAA+B,IAA9BC,EAA6B,uDAAvBR,EAAYS,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IAAK,iBACF,sBACOF,EADP,CAEIN,UAAUO,EAAOE,QAExB,IAAK,aACD,sBACOH,EADP,CAEIP,OAAQQ,EAAOE,QAEvB,IAAK,gBACD,sBACOH,EADP,CAEIJ,UAAWK,EAAOE,QAE1B,IAAK,cACD,OAAO,eACAH,EADP,CAEIL,SAAUM,EAAOE,QAEzB,IAAK,iBACD,sBACOH,EADP,CAEIH,UAAWI,EAAOE,QAE1B,IAAK,wBACD,sBACOH,EADP,CAEIF,cAAeG,EAAOE,QAE9B,QACI,OAAOH,I,8DCbJI,E,iLAvBV,OACG,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACxB,kBAACF,EAAA,EAAKG,IAAN,CACUC,QAAQ,MACRC,IAAKC,KAAKC,MAAMC,OAChBN,MAAM,MACNO,OAAO,QAEf,kBAACT,EAAA,EAAKU,KAAN,KACI,kBAACV,EAAA,EAAKW,MAAN,KACKL,KAAKC,MAAMK,Y,GAZLC,IAAMC,W,eCGvBC,E,4LACkB,IAAD,OAMXH,EAAK,GACLI,EAAI,GACJC,EAAO,GACPC,EAAU,GACVC,EAAQ,GACRC,EAAQ,GACRC,EAAU,GACdC,IAAMC,IATQC,wHAUbC,MAAK,SAAAC,GACFA,EAAIC,KAAKC,QAAQC,KAAI,SAAAC,GACjBlB,EAAKkB,EAAKlB,KACVI,EAAIc,EAAKC,OAAO,GAAGC,MAAMC,SACzBhB,EAAOa,EAAKI,GACZhB,EAAUY,EAAKK,WACfhB,EAAQW,EAAKX,QACbC,EAAQ,CAACR,KAAKA,EAAMI,IAAIA,EAAKG,QAAQA,EAASF,OAAOA,EAAOC,UAAUA,GACtEG,EAAUe,KAAKhB,MAEnB,EAAKb,MAAM8B,aAAahB,Q,+BAI5B,OACI,kBAACiB,EAAA,EAAD,KACChC,KAAKC,MAAMlB,UAAUwC,KAAI,SAACC,EAAKS,GAAN,OACd,kBAACD,EAAA,EAASE,KAAV,KACI,kBAAC,IAAD,CAAMC,GAAE,qBAAgBX,EAAKZ,UAArB,mBAAyCY,EAAKb,SAC3D,yBAAKZ,IAAKyB,EAAKd,IAAI0B,IAAKxC,MAAM,OAAOO,OAAO,SAE5C,kBAAC6B,EAAA,EAASK,QAAV,KACC,4BAAKb,EAAKlB,MACT,4BAAKkB,EAAKX,mB,GAtCTN,IAAMC,WAqEjB8B,eAdA,SAAAjD,GACX,MAAM,CAACN,UAAWM,EAAMN,cAEb,SAAAwD,GACX,MAAM,CACFR,aAAa,SAACS,GACV,OAAOD,EAAS,CACZhD,KAAK,iBACLC,MAAMgD,QAMPF,CAA2B7B,G,qDClEpCgC,E,2MACJpD,MAAQ,CACNqD,OAAQ,I,EAEVC,SAAW,SAAAC,GACTA,EAAMC,iBACNC,QAAQC,IAAI,EAAK9C,MAAMnB,S,EAezBkE,kBAAoB,SAAAC,GAClB,IAAMzD,EAAQyD,EAAEC,OAAO1D,MACvB,EAAK2D,UAAS,YAAuB,IAAjBC,EAAgB,kBAElC,OADAA,EAAUV,OAASlD,EACZ4D,M,mFAjBU,IAAD,OAClBpC,IACGC,IACC,qIAEDE,MAAK,SAAAkC,GACJ,IACIC,EADSD,EAAShC,KAAKC,QACFC,KAAI,SAAAgC,GAAC,OAAIA,EAAEjD,QACpC,EAAKL,MAAMuD,UAAUF,Q,+BAczB,IAAD,OACKG,EAAYzD,KAAKC,MAAMnB,OAAO4E,QAAO,SAAAlC,GAAI,OAC3CA,EAAKmC,cAAcC,SAAS,EAAKvE,MAAMqD,OAAOiB,kBAOhD,OALAF,EAAYA,EAAUlC,KAAI,SAAAC,GAAI,OAC5B,6BACE,2BAAIA,OAIN,6BACE,0BAAMqC,UAAU,WAAWlB,SAAU3C,KAAK2C,UACxC,kBAACmB,EAAA,EAAD,CAAYD,UAAU,yBACpB,kBAACC,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,+BAEF,kBAACC,EAAA,EAAD,CACEC,YAAY,SACZC,SAAUnE,KAAKgD,kBACfxD,MAAOQ,KAAKX,MAAMqD,OAClB0B,WAAS,IAGX,kBAACC,EAAA,EAAD,CAAQ9E,KAAK,UAAb,SACS,OAKZS,KAAKX,MAAMqD,OAASe,EAAY,U,GA3DjBjD,aA0ET8B,eAVE,SAAAjD,GACf,MAAO,CAAEP,OAAQO,EAAMP,WAER,SAAAyD,GACf,MAAO,CACLiB,UAAW,SAAA1E,GACT,OAAOyD,EAAS,CAAEhD,KAAM,aAAcC,MAAOV,QAIpCwD,CAA4BG,GC5C5B6B,MAhCf,WACE,OACE,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAO5E,QAAQ,QACrD,kBAACyE,EAAA,EAAOI,MAAR,KACE,kBAAC,IAAD,CAAMd,UAAU,WAAW1B,GAAG,KAA9B,YAEF,kBAACoC,EAAA,EAAOK,OAAR,CAAeC,gBAAc,0BAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBlD,GAAG,yBAClB,kBAACmD,EAAA,EAAD,CAAKlB,UAAU,YACb,kBAACkB,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMlB,UAAU,WAAW1B,GAAG,cAA9B,kBAEF,kBAAC4C,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMlB,UAAU,WAAW1B,GAAG,WAA9B,iBAEF,kBAAC4C,EAAA,EAAD,CAAKjF,QAAQ,qBACX,kBAAC,IAAD,CAAM+D,UAAU,WAAW1B,GAAG,cAA9B,iBAGJ,kBAAC4C,EAAA,EAAD,CAAKlB,UAAU,WACb,kBAAC,EAAD,OAEF,kBAACkB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMlB,UAAU,WAAW1B,GAAG,UAA9B,gBCrBN6C,G,0MACiB,IAAD,OAClBC,IAAMhE,IACJ,0IACAE,MAAK,SAAAkC,GACL,IAAMpE,EAAYoE,EAAShC,KAAKC,QAC5BhB,EAAO,GACP4E,EAAW,GACXC,EAAQ,GACRtE,EAAU,GACVuE,EAAe,GACfC,EAAe,GACnBpG,EAAUsC,KAAI,SAAA+D,GACZhF,EAAOgF,EAAQhF,KACf4E,EAAWI,EAAQzD,WACnBsD,EAAQG,EAAQ7D,OAAO,GAAGC,MAAMC,SAChCd,EAAUyE,EAAQzE,QAClBuE,EAAe,CACb9E,KAAMA,EACN4E,SAAUA,EACVC,MAAOA,EACPtE,QAASA,GAEXwE,EAAavD,KAAKsD,MAEpB,EAAKnF,MAAMsF,aAAaF,GACxBvC,QAAQC,IAAIsC,Q,+BAId,OACE,kBAAC,IAAMG,SAAP,KACE,yBACE7F,MAAO,CACL8F,QAAS,OACTC,cAAe,MACfC,SAAU,EACVC,SAAU,OACVC,eAAgB,iBAIjB7F,KAAKC,MAAMhB,UAAUsC,KAAI,SAAA+D,GACxB,OAEE,yBAAKQ,MAAM,cACT,yBAAKA,MAAM,OAAOnG,MAAO,CAAEC,MAAO,UAChC,yBACEE,QAAQ,MACRC,IAAKuF,EAAQH,MAAM/C,IACnBxC,MAAM,MACNO,OAAO,MACP2F,MAAM,eACNC,IAAI,QAEN,yBAAKD,MAAM,aACT,wBAAIA,MAAM,cAAcR,EAAQhF,MAChC,uBAAGwF,MAAM,aAAaR,EAAQzE,UAEhC,kBAAC,IAAD,CAAMsB,GAAE,qBAAgBmD,EAAQJ,SAAxB,WACRrB,UAAU,OACVmC,IAAKV,EAAQJ,UACb,kBAACb,EAAA,EAAD,CAAQvE,QAAQ,qBAAhB,wB,GA9DQU,cAoFX8B,eAVE,SAAAjD,GACf,MAAO,CAAEJ,UAAWI,EAAMJ,cAEX,SAAAsD,GACf,MAAO,CACLgD,aAAc,SAAAtG,GACZ,OAAOsD,EAAS,CAAEhD,KAAM,gBAAiBC,MAAOP,QAIvCqD,CAA4B0C,G,QCzFrCiB,E,2MACF5G,MAAQ,CACJP,OAAQ,I,mFAGQ,IAAD,OACfoH,EAAclG,KAAKC,MAAMkG,MAAMC,OAAOxE,GAE1CZ,IAAMC,IAAN,8EAAiFiF,EAAjF,qHACC/E,MAAK,SAAAC,GACN,IAAME,EAAUF,EAAIC,KAAKC,QAC7BwB,QAAQC,IAAIzB,GACR,IAAI+E,EAAY,GACZ7E,EAAO,GACJI,EAAG,GACHtB,EAAK,GACLgG,EAAO,GACPnB,EAAM,GACTvE,EAAU,GACdU,EAAQC,KAAI,SAAAgF,GACR3E,EAAK2E,EAAQ3E,GACbtB,EAAOiG,EAAQjG,KACfgG,EAASC,EAAQ1F,QACjBsE,EAAQoB,EAAQ9E,OAAO,GAAGC,MAAM8E,OAChC5F,EAAU2F,EAAQ1E,WAClBL,EAAK,CACDI,GAAGA,EAAItB,KAAKA,EAAMgG,OAAOA,EAAOnB,MAAMA,EAAOvE,UAAUA,GAE1DyF,EAAUvE,KAAKN,MAEpB,EAAK2B,SAAS,CACVrE,OAAQuH,S,+BAMR,OACC,yBAAKxC,UAAU,mBACV7D,KAAKX,MAAMP,OAAOyC,KAAI,SAACC,EAAKS,GAC3B,OACC,6BACA,kBAAC,IAAD,CAAME,GAAE,qBAAgBX,EAAKZ,UAArB,mBAAyCY,EAAKI,IAAMoE,IAAK/D,GAC7D,kBAAC,EAAD,CAAUL,GAAIJ,EAAKI,GAAItB,KAAMkB,EAAKlB,KAAMJ,OAAQsB,EAAK2D,MAAM/C,IAAKvB,QAASW,EAAK8E,mB,GA3CrE9F,aA4DdiG,cAAWR,G,0BCzDpBS,E,iLAEE,OACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACH5G,KAAKC,MAAM4G,UAAUtF,KAAI,SAAAuF,GACtB,IAAIC,EAAO,CAAC,UAAU,YAAY,UAAU,SAAS,UAAU,OAAO,QACnEC,EAAOD,EAAOE,KAAKC,MAAMD,KAAKE,SAASJ,EAAOK,SACrD,OAEI,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAChB,6BACC,kBAAC7H,EAAA,EAAD,CAAMgF,GAAIsC,EAAOQ,KAAK,QAAQ7H,MAAO,CAAEC,MAAO,QAAS6H,UAAU,WAC9D,kBAAC,IAAD,CAAM9H,MAAO,CAAC+H,eAAgB,OAAQV,MAAO,SAAU7E,GAAE,qBAAgB2E,EAAQa,YACjF,kBAACjI,EAAA,EAAKkI,OAAN,KACCd,EAAQZ,eAUb,uC,GAzBY1F,aA2CT8B,eARE,SAACjD,GACd,MAAO,CAEHwH,UAAWxH,EAAML,YAKVsD,CAAkBoE,GC3C3BmB,E,4LAEkB,IAAD,OAEXjG,EAAI,GACJtB,EAAK,GACLI,EAAI,GACJG,EAAQ,GACRD,EAAU,GACVE,EAAQ,GACR5B,EAAU,GACd8B,IAAMC,IARQ,mIASbE,MAAK,SAAAC,GACFA,EAAIC,KAAKC,QAAQC,KAAI,SAAAC,GACjBI,EAAKJ,EAAKI,GACVtB,EAAKkB,EAAKlB,KACVI,EAAIc,EAAKC,OAAO,GAAGC,MAAMC,SACzBd,EAAQW,EAAKX,QACbD,EAAUY,EAAKK,WACff,EAAQ,CAACc,GAAGA,EAAItB,KAAKA,EAAMI,IAAIA,EAAKG,QAAQA,EAASD,UAAUA,GAC/D1B,EAAU4C,KAAKhB,MAEnB,EAAKb,MAAM6H,aAAa5I,Q,+BAI5B,OACI,kBAAC,IAAMsG,SAAP,KACA,uDACA,yBAAK3B,UAAU,mBACd7D,KAAKC,MAAMf,UAAUqC,KAAI,SAACC,EAAKS,GAC5B,OAEI,kBAAC,IAAD,CAAME,GAAE,qBAAgBX,EAAKZ,UAArB,mBAAyCY,EAAKI,IAAMoE,IAAK/D,GAC7D,kBAAC,EAAD,CAAUL,GAAIJ,EAAKI,GAAItB,KAAMkB,EAAKlB,KAAMJ,OAAQsB,EAAKd,IAAI0B,IAAKvB,QAASW,EAAKX,oB,GAlC/EN,IAAMC,WA8DZ8B,eAhBA,SAAAjD,GACX,MAAM,CACFH,UAAUG,EAAMH,cAGT,SAAAqD,GACX,MAAM,CACFuF,aAAa,SAACC,GACV,OAAOxF,EAAS,CACZhD,KAAK,iBACLC,MAAMuI,QAMPzF,CAA2BuF,GChEpCG,E,2MACF3I,MAAM,CACF4I,YAAY,I,mFAEI,IAAD,OACfjH,IAAMC,IAAI,8DAA8DjB,KAAKC,MAAMkG,MAAMC,OAAOxF,UAAU,iBAAiBZ,KAAKC,MAAMkG,MAAMC,OAAOxE,GAAG,4GACrJT,MAAK,SAAAC,GACF,IAAM8G,EAAkB9G,EAAIC,KAAKC,QACjC,EAAK6B,SAAS,CACV8E,YAAYC,OAGnBC,OAAM,SAAAC,GAAG,OAAEC,MAAMD,Q,+BAIlB,OACY,yBAAKvE,UAAU,mBAClB7D,KAAKX,MAAM4I,YAAY1G,KAAI,SAACC,EAAKS,GAClC,OAEQ,kBAAC,EAAD,CAAU3B,KAAMkB,EAAKlB,KAAMJ,OAAQsB,EAAKC,OAAO,GAAGC,MAAMC,SAASS,IAAKvB,QAASW,EAAKX,kB,GArB5EN,IAAMC,WAgCvBiG,cAAWuB,GCjCpBM,E,2MACFjJ,MAAQ,CACJkJ,cAAc,I,mFAEE,IAAD,OAOfvH,IAAMC,IAAI,6DAA6DjB,KAAKC,MAAMkG,MAAMC,OAAOxE,GAAG,4IACjGT,MAAK,SAAAC,GACF,IAAMoH,EAAoBpH,EAAIC,KAAKC,QACnC,EAAK6B,SAAS,CACVoF,cAAcC,IAElB1F,QAAQC,IAAIyF,MAEfL,OAAM,SAAAC,GAAG,OAAEC,MAAMD,Q,+BAKlB,OACI,yBAAKvE,UAAU,mBACd7D,KAAKX,MAAMkJ,cAAchH,KAAI,SAAAkH,GAC1B,OACA,kBAAC/I,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACtB,kBAACF,EAAA,EAAKG,IAAN,CACUC,QAAQ,MACRC,IAAK0I,EAAKhH,OAAO,GAAGC,MAAMC,SAASS,IACnCxC,MAAM,MACNO,OAAO,QAEf,kBAACT,EAAA,EAAKU,KAAN,KACI,kBAACV,EAAA,EAAKW,MAAN,KACKoI,EAAKnI,gB,GArCPC,IAAMC,WAgDhBiG,cAAW6B,G,QC5CpBI,E,2MACFrJ,MAAM,CACFmC,KAAK,I,mFAEW,IAAD,OACXb,EAAQX,KAAKC,MAAMkG,MAAMC,OAAOxE,GAChC+G,EAAW,GACXrI,EAAM,GACNO,EAAQ,GACRe,EAAG,GACHhB,EAAU,GACVa,EAAO,GACPmH,EAAS,GACTC,EAAQ,GACZ7H,IAAMC,IAAN,gEAAmEN,EAAnE,sGACCQ,MAAK,SAAAC,GACFwH,EAAWxH,EAAIC,KAAKC,QAAQ,GAC5BhB,EAAMsI,EAAStI,KACfO,EAAS+H,EAAS/H,QAClBe,EAAIgH,EAAShH,GACbhB,EAAWgI,EAAS/G,WACpBJ,EAAQmH,EAASnH,OACjBkH,EAAS,CAACrI,KAAKA,EAAKO,QAAQA,EAAQe,GAAGA,EAAGhB,UAAUA,EAAUa,OAAOA,GACrEoH,EAAQ/G,KAAK6G,GACb,EAAKxF,SAAS,CACV3B,KAAMqH,OAGbV,OAAM,SAAAC,GAAMC,MAAMD,Q,+BAGnB,OACIpI,KAAKX,MAAMmC,KAAK4F,OAChB,6BAEA,kBAAC0B,EAAA,EAAD,CAAWC,OAAK,GAChB,kBAACpC,EAAA,EAAD,KACA,4BAAK3G,KAAKX,MAAMmC,KAAK,GAAGlB,MACxB,4BAAKN,KAAKX,MAAMmC,KAAK,GAAGX,SACxB,kBAACmB,EAAA,EAAD,KAEChC,KAAKX,MAAMmC,KAAK,GAAGC,OAAOF,KAAI,SAAAb,GAAG,OACtB,kBAACsB,EAAA,EAASE,KAAV,KACA,yBAAKnC,IAAKW,EAAIgB,MAAMC,SAASS,IAAK2D,IAAI,OAAOnG,MAAM,OAAOO,OAAO,eAO7E,6DACA,kBAAC,EAAD,MACA,6BACA,mDACA,kBAAC,EAAD,CAAaQ,OAAQX,KAAKX,MAAMmC,KAAK,GAAGI,GAAIhB,UAAWZ,KAAKX,MAAMmC,KAAK,GAAGZ,aACjE,S,GAvDKL,IAAMC,WA+DjBiG,cAAWiC,GC7DpBM,E,iLAGE,IAAMC,EAAWjJ,KAAKC,MAAMjB,SAASkK,MAAM,EAAE,GAC7C,OACA,kBAACvC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACHqC,EAAS1H,KAAI,SAAAuF,GACV,IAAIC,EAAO,CAAC,UAAU,YAAY,UAAU,SAAS,UAAU,OAAO,QACnEC,EAAOD,EAAOE,KAAKC,MAAMD,KAAKE,SAASJ,EAAOK,SACrD,OAEI,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAChB,6BACC,kBAAC7H,EAAA,EAAD,CAAMgF,GAAIsC,EAAOQ,KAAK,QAAQ7H,MAAO,CAAEC,MAAO,QAAS6H,UAAU,WAC9D,kBAAC,IAAD,CAAM9H,MAAO,CAAC+H,eAAgB,OAAQV,MAAO,SAAU7E,GAAE,qBAAgB2E,EAAQa,YACjF,kBAACjI,EAAA,EAAKkI,OAAN,KACCd,EAAQZ,eAUb,qC,0CAmBY,IAAD,OAKXlH,EAAS,GACbgC,IAAMC,IAAI,+DACTE,MAAK,SAAAC,GACYA,EAAIC,KAAKC,QACjBC,KAAI,SAAAuF,GACV9H,EAAS8C,KAAK,CACVoE,YAAaY,EAAQxG,KACrBqH,UAAWb,EAAQlF,GACnBuH,YAAarC,EAAQsC,iBAI3B,EAAKnJ,MAAMoJ,WAAWrK,U,GA/DVwB,aAqFPiG,eAAWnE,aAfT,SAACjD,GAChB,MAAO,CACHL,SAAUK,EAAML,aAIL,SAACuD,GACd,MAAO,CACH8G,WAAY,SAACrK,GAAD,OAAcuD,EAAS,CAC/BhD,KAAM,cACNC,MAAOR,QAKOsD,CAA6B0G,ICxFjDM,I,kNACFjK,MAAQ,G,wEAGJ,OADAyD,QAAQC,IAAI,kBAER,kBAAC,IAAMyC,SAAP,KACA,yBAAK3B,UAAU,mBACd7D,KAAKC,MAAMd,cAAcoC,KAAI,SAACC,EAAKS,GAChC,OACI,kBAAC,IAAD,CAAME,GAAE,qBAAgBX,EAAKZ,UAArB,mBAAyCY,EAAKI,IAAMoE,IAAK/D,GAC7D,kBAAC,EAAD,CAAUL,GAAIJ,EAAKI,GAAItB,KAAMkB,EAAKlB,KAAMJ,OAAQsB,EAAKC,OAAO,GAAGC,MAAMC,SAASS,IAAKvB,QAASW,EAAKX,kB,0CAYjG,IAAD,OACfG,IAAMC,IAAI,8DAA8DjB,KAAKC,MAAMkG,MAAMC,OAAOxF,UAAU,yIACzGO,MAAK,SAAAC,GACF,IAAItC,EAASsC,EAAIC,KAAKC,QACtB,EAAKrB,MAAMsJ,iBAAiBzK,U,GA1BVyB,IAAMC,YA2CrBiG,eAAWnE,aAXT,SAACjD,GACf,MAAM,CACLF,cAAeE,EAAMF,kBAIR,SAACoD,GACd,MAAO,CACHgH,iBAAkB,SAACzK,GAAD,OAAYyD,EAAS,CAAChD,KAAM,wBAAyBC,MAAOV,QAG5DwD,CAA2BgH,KCiDtCE,OAtFf,WAGE,OACE,yBAAK3F,UAAU,OAEb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CAAO4F,KAAK,IAAIC,OAAQ,WACtB,OACE,6BACA,kBAAC,EAAD,WAOJ,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,IAAIC,OAAQ,WAC5B,OACE,kBAAC,IAAMlE,SAAP,KASE,0DACE,kBAACoE,EAAD,MAIF,qDACE,kBAACC,GAAD,UAMF,kBAAC,IAAD,CAAOF,OAAK,EAACF,KAAK,aAAaC,OAAU,WAC7C,OACE,kBAAC,EAAD,SAGJ,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,UAAUC,OAAQ,WAClC,OACE,kBAAC,EAAD,SAKF,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,+BAA+BC,OAAQ,WACvD,OAEE,kBAAC,GAAD,SAIJ,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,mCAAmCC,OAAQ,WAC3D,OACE,kBAAC,EAAD,SAGI,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,aAAaC,OAAQ,WAC/C,OACG,kBAAC,EAAD,SAKH,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,iBAAiBC,OAAQ,WACzC,OACE,kBAAC,EAAD,WC3EMI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9D,MACvB,2D,WCLA+D,GAAQC,YACV/K,EACA2K,OAAOK,8BAAgCL,OAAOK,gCAE5CC,GAAQ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUH,MAAOA,IACb,kBAAC,GAAD,QAIpBI,IAASZ,OAAOW,GAAKE,SAASC,eAAe,SD4GvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxJ,MAAK,SAAAyJ,GACjCA,EAAaC,iB","file":"static/js/main.2d5383e1.chunk.js","sourcesContent":["const inialState ={\n    cities: [],\n    topCities: [],\n    intrests: [],\n    countries: [],\n    allCities:[],\n    CountryCities: []\n}\nconst rootReducer = (state=inialState, action) => {\n    switch (action.type) {\n        case \"SET_TOP_CITIES\":\n           return{\n               ...state,\n               topCities:action.value\n           }\n        case \"SET_CITIES\":\n            return{\n                ...state,\n                cities: action.value\n            }\n        case \"GET_COUNTRIES\":\n            return{\n                ...state,\n                countries: action.value\n            }\n        case \"Add_intrest\":\n            return {\n                ...state,\n                intrests: action.value\n            }\n        case \"SET_ALL_CITIES\":\n            return{\n                ...state,\n                allCities: action.value\n            }\n        case \"SET_CITIES_IN_COUNRTY\":\n            return{\n                ...state,\n                CountryCities: action.value\n            }\n        default:\n            return state;\n   \n    }\n}\nexport default rootReducer;","import React from 'react'\nimport {Card} from 'react-bootstrap' \n\nclass CityCard extends React.Component{\n    render()\n    {return(\n        <Card style={{ width: \"18rem\" }}>\n      <Card.Img\n                variant=\"top\"\n                src={this.props.imgURL}\n                width=\"200\"\n                height=\"200\"\n              />\n        <Card.Body>\n            <Card.Title>\n                {this.props.name}\n            </Card.Title>\n            {/* <Card.Text>\n                {this.props.snippet}\n            </Card.Text> */}\n        </Card.Body>\n        {/* <img src={this.props.imgURL} alt=\"\" width=\"400\" height=\"200\"/> */}\n        {/* <h3>{this.props.name}</h3> */}\n        {/* <p>{this.props.snippet}</p> */}\n   \n        </Card>\n    )}\n}\nexport default CityCard;","import React from 'react'\nimport axios from 'axios'\nimport {connect} from 'react-redux'\nimport CityCard from './CityCard'\nimport Carousel from 'react-bootstrap/Carousel'\nimport {Link} from 'react-router-dom'\nclass MainSection extends React.Component{\n    componentDidMount(){\n        const apiKey=\"&account=M48YWFOZ&token=8tobp16qxx6luhn0k0fhlou5m4h52poe\"\n        const apiHttps=\"https://www.triposo.com/api/20190906/\"\n        const citiesInfo = \"location.json?&count=15\" // need id of city , has array of images , has intro\n        const apiUrl= apiHttps+citiesInfo+apiKey\n\n        let name=\"\"\n        let img=\"\"\n        let cityId=\"\"\n        let countryId=\"\"\n        let snippet=\"\"\n        let cityObj={}\n        let citiesTop=[]\n        axios.get(apiUrl)\n        .then(res => {\n            res.data.results.map(city => {\n                name=city.name\n                img=city.images[0].sizes.original\n                cityId=city.id\n                countryId=city.country_id\n                snippet=city.snippet\n                cityObj={name:name, img:img, snippet:snippet ,cityId:cityId,countryId:countryId}\n                citiesTop.push(cityObj)\n            })\n            this.props.setTopCities(citiesTop);\n        })\n    }\n    render(){\n        return(\n            <Carousel>\n            {this.props.topCities.map((city,index)=>\n                        <Carousel.Item>\n                            <Link to={`/Countries/${city.countryId}/Cities/${city.cityId}`}>\n                       <img src={city.img.url} width=\"1500\" height=\"600\"/>\n                       </Link>\n                       <Carousel.Caption>\n                        <h1>{city.name}</h1>\n                         <h4>{city.snippet}</h4>\n                        </Carousel.Caption>\n                        </Carousel.Item>\n            )}               \n            \n            </Carousel>\n            // <Carousel>\n            // {this.props.topCities.map((city,index)=>\n            //             <Carousel.Item>\n            //              <CityCard key={index} name={city.name} imgURL={city.img.url} snippet={city.snippet} style={{width:\"800px\"}}/>\n            //             </Carousel.Item>\n            // )}               \n            \n            // </Carousel>\n        )\n    }\n}\nconst getState=state=>{\n    return{topCities: state.topCities}\n}\nconst setState=dispatch=>{\n    return{\n        setTopCities:(arrTopCities)=>{\n            return dispatch({\n                type:\"SET_TOP_CITIES\",\n                value:arrTopCities\n            })\n        }\n    }\n\n}\nexport default connect(getState,setState)(MainSection)","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { Button } from \"react-bootstrap\";\nimport { InputGroup } from \"react-bootstrap\";\nimport { FormControl } from \"react-bootstrap\";\nimport { Dropdown } from \"semantic-ui-react\";\n\nclass WhereToGo extends Component {\n  state = {\n    search: \"\"\n  };\n  onSubmit = event => {\n    event.preventDefault();\n    console.log(this.props.cities);\n  };\n  componentDidMount() {\n    axios\n      .get(\n        \"https://www.triposo.com/api/20190906/location.json?&fields=name&count=100&account=M48YWFOZ&token=8tobp16qxx6luhn0k0fhlou5m4h52poe\"\n      )\n      .then(response => {\n        let cities = response.data.results;\n        let citiesNames = cities.map(c => c.name);\n        this.props.setCities(citiesNames);\n\n        // console.log(citiesNames)\n      });\n  }\n  handleInputChange = e => {\n    const value = e.target.value;\n    this.setState(({ ...copyState }) => {\n      copyState.search = value;\n      return copyState;\n    });\n  };\n\n  render()\n   {\n    let arrSearch = this.props.cities.filter(city =>\n      city.toLowerCase().includes(this.state.search.toLowerCase())\n    );\n    arrSearch = arrSearch.map(city => (\n      <div>\n        <p>{city}</p>\n      </div>\n    ));\n    return (\n      <div>\n        <form className=\"iputinfo\" onSubmit={this.onSubmit}>\n          <InputGroup className=\"mb-2 mx-3 my-2 w-auto\">\n            <InputGroup.Prepend>\n              <InputGroup.Text>Where You want to Go </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder=\"Riyadh\"\n              onChange={this.handleInputChange}\n              value={this.state.search}\n              autoFocus\n            />\n            \n            <Button type=\"submit\">\n              Search{\" \"}\n            </Button>\n          </InputGroup>\n\n        </form>\n        {this.state.search ? arrSearch : null}\n      </div>\n    );\n  }\n}\nconst getState = state => {\n  return { cities: state.cities };\n};\nconst setState = dispatch => {\n  return {\n    setCities: cities => {\n      return dispatch({ type: \"SET_CITIES\", value: cities });\n    }\n  };\n};\nexport default connect(getState, setState)(WhereToGo);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Navbar } from \"react-bootstrap\";\nimport { Nav } from \"react-bootstrap\";\nimport WhereToGo from \"../nav/WhereToGo\";\n\nfunction Nave() {\n  return (\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand>\n        <Link className=\"navColor\" to=\"/\"> Home  </Link>\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto \" >\n          <Nav >\n            <Link className=\"navColor\" to=\"/Countries\"> Countries . </Link>\n          </Nav>\n          <Nav>\n            <Link className=\"navColor\" to=\"/Cities\"> Cities   . </Link>\n          </Nav>\n          <Nav variant=\"outline-secondary\">\n            <Link className=\"navColor\" to=\"/Interests\"> Interests </Link>\n          </Nav>\n        </Nav>\n        <Nav className=\"mr-auto\">\n          <WhereToGo />\n        </Nav>\n        <Nav>\n          <Nav>\n            <Link className=\"navColor\" to=\"/About\"> About </Link>\n          </Nav>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default Nave;\n","import React, { Component } from \"react\";\nimport Axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport { Card } from \"react-bootstrap\";\nimport { CardGroup } from \"react-bootstrap\";\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\n\nclass CountryCard extends Component {\n  componentDidMount() {\n    Axios.get(\n      \"https://www.triposo.com/api/20190906/location.json?tag_labels=country&count=20&account=M48YWFOZ&token=8tobp16qxx6luhn0k0fhlou5m4h52poe\"\n    ).then(response => {\n      const countries = response.data.results;\n      let name = \"\";\n      let coutryid = \"\";\n      let image = \"\";\n      let snippet = \"\";\n      let countriesObj = {};\n      let countriesArr = [];\n      countries.map(country => {\n        name = country.name;\n        coutryid = country.country_id;\n        image = country.images[0].sizes.original;\n        snippet = country.snippet;\n        countriesObj = {\n          name: name,\n          coutryid: coutryid,\n          image: image,\n          snippet: snippet\n        };\n        countriesArr.push(countriesObj);\n      });\n      this.props.setCountries(countriesArr);\n      console.log(countriesArr);\n    });\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexGrow: 4,\n            flexWrap: \"wrap\",\n            justifyContent: \"space-around\"\n            \n          }}\n        >\n          {this.props.countries.map(country => {\n            return (\n           \n              <div class=\"card-group\">\n                <div class=\"card\" style={{ width: \"18rem\" }}>\n                  <img\n                    variant=\"top\"\n                    src={country.image.url}\n                    width=\"200\"\n                    height=\"200\"\n                    class=\"card-img-top\"\n                    alt=\"...\"\n                  />\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">{country.name}</h5>\n                    <p class=\"card-text\">{country.snippet}</p>\n                  </div>\n                  <Link to={`/Countries/${country.coutryid}/Cities`}\n                  className=\"card\"\n                  key={country.coutryid}>\n                  <Button variant=\"outline-secondary\">\n                  Discover</Button>\n                  </Link>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nconst getState = state => {\n  return { countries: state.countries };\n};\nconst setState = dispatch => {\n  return {\n    setCountries: countries => {\n      return dispatch({ type: \"GET_COUNTRIES\", value: countries });\n    }\n  };\n};\nexport default connect(getState, setState)(CountryCard);\n","import React, {Component} from 'react';\nimport axios from 'axios'\nimport {withRouter} from 'react-router-dom'\nimport {Link} from 'react-router-dom'\nimport CityCard from '../main/CityCard'\nclass intrestDetails extends Component {\n    state = { \n        cities: [],\n     }\n\n    componentDidMount(){\n    let intrestName = this.props.match.params.id\n\n    axios.get(`https://www.triposo.com/api/20190906/location.json?child_tag_labels=${intrestName}&count=10&fields=id,name,score,snippet,images,country_id&account=M48YWFOZ&token=8tobp16qxx6luhn0k0fhlou5m4h52poe`)\n    .then(res => {\n    const results = res.data.results;\nconsole.log(results)\n    let intCities = []\n    let city = {}\n       let id=\"\"\n       let name=\"\"\n       let snipet=\"\"\n       let image=\"\"\n    let countryId=\"\"\n    results.map(element => {\n        id = element.id\n        name = element.name\n        snipet = element.snippet\n        image = element.images[0].sizes.medium\n        countryId=element.country_id\n        city={\n            id:id, name:name, snipet:snipet,image:image, countryId:countryId\n        }\n         intCities.push(city)\n    })\n    this.setState({\n        cities: intCities\n    })\n    })\n    }\n\n    render() { \n        return ( \n         <div className=\"CitiesContainer\">\n             {this.state.cities.map((city,index) => {\n               return (\n                <div>\n                <Link to={`/Countries/${city.countryId}/Cities/${city.id}`} key={index} >     \n                    <CityCard id={city.id} name={city.name} imgURL={city.image.url} snippet={city.snipet} /> \n                </Link>    \n                 \n                 </div> \n                // <div>\n                // <img src={city.image.url} />\n                // <h2>{city.name}</h2>\n                // <p>{city.snipet}</p>\n                // </div>\n               )  \n             }\n             )}\n         </div>\n         );\n    }\n}\n \nexport default withRouter(intrestDetails);","import React, { Component } from 'react';\nimport {connect} from 'react-redux'\nimport {Link} from 'react-router-dom'\nimport {Card} from 'react-bootstrap'\nimport {Container} from 'react-bootstrap'\nimport {Row} from 'react-bootstrap'\nimport {Col} from 'react-bootstrap'\n\nclass Interests extends Component {\n    render() { \n        return ( \n        <Container>\n            <Row>\n        {this.props.interests.map(intrest => {\n            let colors=[\"primary\",\"secondary\",\"success\",\"danger\",\"warning\",\"info\",\"dark\"]\n           let color= colors[Math.floor(Math.random()*colors.length)]\n        return (\n          \n            <Col xs={3} md={4}>\n            <br/>\n             <Card bg={color} text=\"white\" style={{ width: '18rem' ,textAlign:'center'}}>\n                <Link style={{textDecoration: \"none\", color: \"white\"}} to={`/Interests/${intrest.intrestId}`}>\n                <Card.Header>\n                {intrest.intrestName}\n                </Card.Header>\n                </Link>\n                {/* <Card.Body>\n                <Card.Title>{intrest.intrestName}</Card.Title> \n                 <Card.Text>\n                {intrest.intrestDesc}\n                </Card.Text>\n                </Card.Body> */}\n             </Card>\n            <br/>\n             </Col>\n        )\n        \n        })}\n        </Row>\n        </Container>);\n    }\n}\n\nconst getState = (state) => {\n    return {\n        \n        interests: state.intrests\n    }\n}\n\n \nexport default connect(getState)(Interests);","import React from 'react';\nimport {connect} from 'react-redux'\nimport axios from 'axios'\nimport CityCard from '../main/CityCard'\nimport {Link} from 'react-router-dom'\nimport {withRouter} from 'react-router-dom'\n\n\nclass Cities extends React.Component {\n    \n    componentDidMount(){\n        const apiUrl= 'https://www.triposo.com/api/20190906/location.json?&fields=all&count=25&account=M48YWFOZ&token=8tobp16qxx6luhn0k0fhlou5m4h52poe'\n        let id =\"\"\n        let name=\"\"\n        let img=\"\"\n        let snippet=\"\"\n        let countryId=\"\"\n        let cityObj={}\n        let allCities=[]\n        axios.get(apiUrl)\n        .then(res => {\n            res.data.results.map(city => {\n                id = city.id\n                name=city.name\n                img=city.images[0].sizes.original\n                snippet=city.snippet\n                countryId=city.country_id\n                cityObj={id:id, name:name, img:img, snippet:snippet, countryId:countryId}\n                allCities.push(cityObj)\n            })\n            this.props.setAllCities(allCities);\n        })\n    }\n    render() { \n        return ( \n            <React.Fragment>\n            <h1>Cities Around The World</h1>\n            <div className=\"CitiesContainer\">\n            {this.props.allCities.map((city,index)=>{\n                return(\n                    \n                    <Link to={`/Countries/${city.countryId}/Cities/${city.id}`} key={index} >     \n                        <CityCard id={city.id} name={city.name} imgURL={city.img.url} snippet={city.snippet} /> \n                    </Link>    \n                     \n                           \n                )\n            })}\n            </div> \n            </React.Fragment>\n         );\n    }\n}\n \nconst getState=state=>{\n    return{\n        allCities:state.allCities\n    }\n}\nconst setState=dispatch=>{\n    return{\n        setAllCities:(arrAllCities)=>{\n            return dispatch({\n                type:\"SET_ALL_CITIES\",\n                value:arrAllCities\n            })\n        }\n    }\n\n}\nexport default connect(getState,setState)(Cities)","import React from 'react'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nimport CityCard from '../main/CityCard'\nimport {withRouter} from 'react-router-dom'\n\nclass AlsoVisitedCities extends React.Component {\n    state={\n        alsoVisited:[]\n    }\n    componentDidMount(){\n        axios.get(\"https://www.triposo.com/api/20190906/location.json?part_of=\"+this.props.match.params.countryId+\"&also_visited=\"+this.props.match.params.id+\"&order_by=-also_visited_score&fields=all&count=5&account=M48YWFOZ&token=8tobp16qxx6luhn0k0fhlou5m4h52poe\")\n        .then(res =>{\n            const alsoVisitedCopy = res.data.results\n            this.setState({\n                alsoVisited:alsoVisitedCopy\n            })\n        })\n        .catch(err=>alert(err))\n    }\n\n    render() { \n        return ( \n                    <div className=\"CitiesContainer\">\n                {this.state.alsoVisited.map((city,index)=>{\n                return(\n                    // <Link to={`/Countries/${city.country_id}/Cities/${city.id}`} key={index}>    \n                        <CityCard name={city.name} imgURL={city.images[0].sizes.original.url} snippet={city.snippet} />\n                    // </Link> \n                )\n            })}\n                </div>\n                \n          \n         )\n    }\n}\n \nexport default withRouter(AlsoVisitedCities);","import React from 'react'\nimport axios from 'axios'\nimport {withRouter} from 'react-router-dom'\nimport {Card} from 'react-bootstrap' \n\nclass ThingsToDo extends React.Component {\n    state = { \n        cityRestrunts:[]\n     }\n    componentDidMount(){\n        //restrunts\n        //https://www.triposo.com/api/20190906/poi.json?location_id=${this.props.match.params.id}&tag_labels=eatingout&fields=id,name,images,booking_info&count=5&order_by=-score\n        // hotels\n        //https://www.triposo.com/api/20190906/poi.json?location_id=Paris&tag_labels=hotels&fields=id,name,images,booking_info&count=5&order_by=-score\n        //museums\n        //https://www.triposo.com/api/20190906/poi.json?location_id=Paris&tag_labels=museums&bookable=1&fields=id,name,images,booking_info&count=5&order_by=-score\n        axios.get(\"https://www.triposo.com/api/20190906/poi.json?location_id=\"+this.props.match.params.id+\"&tag_labels=eatingout&fields=id,name,images,booking_info&count=5&order_by=-score&account=M48YWFOZ&token=8tobp16qxx6luhn0k0fhlou5m4h52poe\")\n        .then(res =>{\n            const cityRestruntsCopy = res.data.results\n            this.setState({\n                cityRestrunts:cityRestruntsCopy\n            })\n            console.log(cityRestruntsCopy)\n        })\n        .catch(err=>alert(err))\n    }\n\n    render() { \n        \n        return ( \n            <div className=\"CitiesContainer\">\n            {this.state.cityRestrunts.map(rest=>{\n                return(\n                <Card style={{ width: \"18rem\" }}>\n                <Card.Img\n                          variant=\"top\"\n                          src={rest.images[0].sizes.original.url}\n                          width=\"200\"\n                          height=\"200\"\n                        />\n                  <Card.Body>\n                      <Card.Title>\n                          {rest.name}\n                      </Card.Title>\n                  </Card.Body>   \n                  </Card>\n                )\n            })}\n           </div>\n         );\n    }\n}\n \nexport default withRouter(ThingsToDo);","import React from 'react'\nimport axios from 'axios'\nimport {withRouter} from 'react-router-dom'\nimport AlsoVisited from '../cities/AlsoVisitedCities'\nimport ThingsToDo from '../cities/ThingsToDo'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Container from 'react-bootstrap/Container'\nimport Carousel from 'react-bootstrap/Carousel'\n\nclass CityDetails extends React.Component{\n    state={\n        city:[]\n    }\n    componentDidMount(){\n        let cityId= this.props.match.params.id\n        let cityCopy = {}\n        let name =\"\"\n        let snippet=\"\"\n        let id=\"\"\n        let countryId=\"\"\n        let images=[]\n        let cityData=[]\n        let arrCity=[]\n        axios.get(`https://www.triposo.com/api/20190906/location.json?id=${cityId}&fields=name,snippet,id,country_id,images&account=M48YWFOZ&token=8tobp16qxx6luhn0k0fhlou5m4h52poe`)\n        .then(res=>{\n            cityData = res.data.results[0]\n            name= cityData.name\n            snippet= cityData.snippet\n            id= cityData.id\n            countryId= cityData.country_id\n            images= cityData.images\n            cityCopy={name:name,snippet:snippet,id:id,countryId:countryId,images:images}  \n            arrCity.push(cityCopy)     \n            this.setState({\n                city: arrCity\n            })\n        })\n        .catch(err=>{alert(err)})\n    }\n    render(){\n        return(\n            this.state.city.length ?\n            <div>\n          \n            <Jumbotron fluid>\n            <Container>\n            <h1>{this.state.city[0].name}</h1>\n            <h5>{this.state.city[0].snippet}</h5>\n            <Carousel>\n            {/* <div style={{ display: 'flex', flexDirection: 'row', width: '100%', flexWrap: 'wrap', justifyContent: 'center'}}>   */}\n            {this.state.city[0].images.map(img =>\n                        <Carousel.Item>\n                        <img src={img.sizes.original.url} alt=\"city\" width=\"1500\" height=\"600\"/>\n                        </Carousel.Item>\n            )}               \n            {/* </div> */}\n            </Carousel>\n            </Container>\n            </Jumbotron>\n            <h3>Restaurants worth discovering</h3>\n            <ThingsToDo />\n            <br/>\n            <h3>People also visited</h3>\n            <AlsoVisited cityId={this.state.city[0].id} countryId={this.state.city[0].countryId} />\n            </div> : null\n        \n        )\n    }\n}\n\n\n\nexport default withRouter(CityDetails);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport axios from 'axios';\nimport {Link} from 'react-router-dom'\nimport {withRouter} from 'react-router-dom'\nimport {Card} from 'react-bootstrap'\nimport {Container} from 'react-bootstrap'\nimport {Row} from 'react-bootstrap'\nimport {Col} from 'react-bootstrap'\n\n\nclass SideBar extends Component {\n    \n    render() { \n        const firstTen = this.props.intrests.slice(0,9)\n        return ( \n        <Container>\n            <Row>\n        {firstTen.map(intrest => {\n            let colors=[\"primary\",\"secondary\",\"success\",\"danger\",\"warning\",\"info\",\"dark\"]\n           let color= colors[Math.floor(Math.random()*colors.length)]\n        return (\n          \n            <Col xs={3} md={4}>\n            <br/>\n             <Card bg={color} text=\"white\" style={{ width: '18rem' ,textAlign:'center'}}>\n                <Link style={{textDecoration: \"none\", color: \"white\"}} to={`/Interests/${intrest.intrestId}`}>\n                <Card.Header>\n                {intrest.intrestName}\n                </Card.Header>\n                </Link>\n                {/* <Card.Body>\n                <Card.Title>{intrest.intrestName}</Card.Title> \n                 <Card.Text>\n                {intrest.intrestDesc}\n                </Card.Text>\n                </Card.Body> */}\n             </Card>\n            <br/>\n             </Col>\n        )\n        \n        })}\n        </Row>\n        </Container> \n            // <div>\n            //     {firstTen.map(element => {\n            //         return (\n            //         <Link to={`/Interests/${element.intrestId}`}>\n            //         <li key={element.intrestId}> {element.intrestName} </li>\n            //         </Link>\n            //         )\n            //     })}       \n            // </div>\n         );\n    }\n\n    componentDidMount(){\n        // const apiKey=\"&account=M48YWFOZ&token=8tobp16qxx6luhn0k0fhlou5m4h52poe\"\n        // const apiHttps=\"https://www.triposo.com/api/20190906/\"\n        // const citiesInfo = \"location.json?&count=50\" // need id of city , has array of images , has intro\n        // const apiUrl= apiHttps+citiesInfo+apiKey\n        let intrests=[]\n        axios.get('https://www.triposo.com/api/20190906/common_tag_labels.json')\n        .then(res => {\n          const results = res.data.results;\n          results.map(intrest => {\n            intrests.push({\n                intrestName: intrest.name,\n                intrestId: intrest.id,\n                intrestDesc: intrest.description\n             })\n    \n          })\n          this.props.setIntrest(intrests)\n        })\n    }\n\n}\n\n\nconst getState = (state) => {\n  return {\n      intrests: state.intrests\n  }\n}\n\nconst setState = (dispatch) => {\n    return {\n        setIntrest: (intrests) => dispatch({\n            type: \"Add_intrest\",\n            value: intrests\n        })\n    }\n  }\n\nexport default withRouter(connect(getState, setState) (SideBar));\n","import React from 'react';\nimport axios from 'axios';\nimport {withRouter} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport {Link} from 'react-router-dom'\nimport CityCard from '../main/CityCard'\n\n\nclass CitiesInCountry extends React.Component {\n    state = {  }\n    render() { \n        console.log(\"is it working?\")\n        return ( \n            <React.Fragment>\n            <div className=\"CitiesContainer\">\n            {this.props.CountryCities.map((city,index)=>{\n                return(\n                    <Link to={`/Countries/${city.countryId}/Cities/${city.id}`} key={index} >     \n                        <CityCard id={city.id} name={city.name} imgURL={city.images[0].sizes.original.url} snippet={city.snippet} /> \n                    </Link>    \n                )\n            })}\n            </div> \n            </React.Fragment>\n        );\n    }\n\n\n\n\n    componentDidMount(){\n        axios.get(\"https://www.triposo.com/api/20190906/location.json?part_of=\"+this.props.match.params.countryId+\"&tag_labels=city&count=10&fields=id,name,score,snippet,images&order_by=-score&account=M48YWFOZ&token=8tobp16qxx6luhn0k0fhlou5m4h52poe\")\n        .then(res => {\n            let cities = res.data.results\n            this.props.setCountryCities(cities)\n        })\n    }\n\n}\n\nconst getState = (state) => {\n   return{\n    CountryCities: state.CountryCities\n   }\n}\n\nconst setState = (dispatch) => {\n    return {\n        setCountryCities: (cities) => dispatch({type: \"SET_CITIES_IN_COUNRTY\", value: cities})\n    }\n}\nexport default withRouter(connect(getState,setState)(CitiesInCountry));","import React from 'react';\nimport Main from './components/main/Main'\nimport Nav from './components/nav/Nav'\nimport WhereToGo from './components/nav/WhereToGo'\nimport CountryCard from './components/main/CountryCard'\nimport {Route} from 'react-router-dom'\nimport IntrestDetails from './components/intrestDetails/intrestDetails'\nimport Interests from './components/interests/Interests'\nimport Cities from './components/cities/Cities'\nimport CityDetails from './components/main/CityDetails'\nimport Sidebar from './components/sidebar/Sidebar';\nimport './App.css'\nimport CitiesInCountry from './components/cities/CitiesInCountry'\n\nfunction App() {\n  // const countries = this.props.countries.slice(0,10)\n\n  return (\n    <div className=\"App\">\n      {/* NAV START HERE */}\n      <header className=\"App-header\">\n        <Route path=\"/\" render={()=>{\n          return(\n            <div>\n            <Nav/>\n            {/* <WhereToGo /> */}\n            </div>\n          )}} />\n        </header>\n      {/* NAV END HERE */}\n      \n        <Route exact path=\"/\" render={() => {\n          return (\n            <React.Fragment>\n\n              {/* Country Start */}\n            \n                {/* <CountryCard /> */}\n               \n              {/* country end */}\n\n              {/* MAIN START HERE */}\n              <h1>Discover These Cities Now!</h1>\n                <Main />\n              {/* MAIN END HERE */}\n\n              {/* SIDE BAR START HERE */}\n              <h1>Discover By Interests</h1>\n                <Sidebar />\n              {/* SIDE BAR END HERE */}\n\n      </React.Fragment>\n          )\n        }} />\n              <Route exact path=\"/Countries\" render = {() => {\n          return(\n            <CountryCard />\n          )\n        }} />\n        <Route exact path=\"/Cities\" render={() => {\n          return(\n            <Cities />\n          )\n          }}\n          />\n\n          <Route exact path=\"/Countries/:countryId/Cities\" render={()=>{\n            return(\n\n              <CitiesInCountry />\n            )\n          }} />\n\n          <Route exact path=\"/Countries/:countryId/Cities/:id\" render={()=>{\n            return(\n              <CityDetails />\n            )\n          }} />\n                  <Route exact path=\"/Interests\" render={() => {\n          return(\n             <Interests />\n\n          )\n          }}\n          />\n          <Route exact path=\"/Interests/:id\" render={()=>{\n            return(\n              <IntrestDetails />\n            )\n          }} />\n\n         \n     \n     \n      \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './Store/reducer'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nconst store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\nconst app = ( <BrowserRouter>\n                <Provider store={store}> \n                    <App/>\n                    </Provider>\n            </BrowserRouter>)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}